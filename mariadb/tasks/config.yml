- name: create database
  mysql_db: name={{ mysql_database_name }} state=present

- name: create sys-maint user
  mysql_user:
    name=debian-sys-maint
    password={{ deb_db_password }}
    host=%
    priv=*.*:ALL,GRANT
  notify:
    - Restart MariaDB

- name: create application user
  mysql_user:
    name={{ mysql_application_user }}
    password={{ mysql_application_pass }}
    host=%
    priv=*.*:ALL
  notify:
    - Restart MariaDB

- name: create HAProxy user
  mysql_user:
    name=haproxy_check
    password=
    host={{ mysql_loadbalancer }}
    priv=*.*:ALL
  when: mysql_replication_role == "master" or mysql_replication_role == "slave"
  notify:
    - Restart MariaDB

- name: create replication user
  mysql_user:
    name={{ mysql_replication_user }}
    password={{ mysql_replication_pass }}
    host=%
    priv=*.*:"REPLICATION SLAVE"
  when: mysql_replication_role == "master"
  notify:
    - Restart MariaDB

- name: check status of slaves
  mysql_replication: mode=getslave
  ignore_errors: true
  register: slave_status
  when: mysql_replication_role == "slave"

- name: stop replication
  mysql_replication: mode=stopslave
  when: mysql_replication_role == "slave" and (slave_status|failed or slave_status.Slave_SQL_Running != "Yes")

- name: set replication
  mysql_replication:
    mode=changemaster
    master_host={{ mysql_replication_master }}
    master_user={{ mysql_replication_user }}
    master_password={{ mysql_replication_pass }}
  when: mysql_replication_role == "slave" and (slave_status|failed or slave_status.Slave_SQL_Running != "Yes")

- name: start replication
  mysql_replication: mode=startslave
  when: mysql_replication_role == "slave" and (slave_status|failed or slave_status.Slave_SQL_Running != "Yes")